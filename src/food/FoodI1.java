package food;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Admin
 */
import Delivery.common_methods_;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.HeadlessException;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.MessageFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import net.proteanit.sql.DbUtils;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;


public class FoodI1 extends javax.swing.JInternalFrame {

    /**
     * Creates new form FoodI1
     */
    
    Connection conn = null;
    PreparedStatement ps = null;
    ResultSet rs = null;
    public FoodI1() {
        //  ((javax.swing.plaf.basic.BasicInternalFrameUI)this.getUI()).setNorthPane(null);
        
        initComponents();
        
         conn = Dbconnecter.con();
         foodid();
         foodTableLoad();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox_Category = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField_food_name = new javax.swing.JTextField();
        jTextField_foodid = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField_price = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_food = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton_add = new javax.swing.JButton();
        jButton_search = new javax.swing.JButton();
        jButton_update = new javax.swing.JButton();
        jButton_Remove = new javax.swing.JButton();
        jButton_clear = new javax.swing.JButton();
        jButton_PRINT = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton_category = new javax.swing.JButton();
        jButton_price = new javax.swing.JButton();
        jButton1_Demo = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jComboBox_Category.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Category", "Rice", "Meals", "Fast Food", "Juice", "Dessert" }));
        jComboBox_Category.setToolTipText("Select relevant category");
        jComboBox_Category.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox_CategoryMouseClicked(evt);
            }
        });
        jComboBox_Category.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_CategoryActionPerformed(evt);
            }
        });
        jComboBox_Category.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox_CategoryKeyPressed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 255, 204));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("Food Category");

        jLabel2.setBackground(new java.awt.Color(255, 255, 204));
        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("Food Name");

        jTextField_food_name.setToolTipText("Food name with only LETTERS");
        jTextField_food_name.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField_food_nameMouseClicked(evt);
            }
        });
        jTextField_food_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_food_nameActionPerformed(evt);
            }
        });
        jTextField_food_name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField_food_nameKeyPressed(evt);
            }
        });

        jTextField_foodid.setToolTipText("Food ID with only INTERGERS");
        jTextField_foodid.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField_foodidMouseClicked(evt);
            }
        });
        jTextField_foodid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_foodidActionPerformed(evt);
            }
        });
        jTextField_foodid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField_foodidKeyPressed(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(255, 255, 204));
        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setText("Food ID");

        jLabel6.setBackground(new java.awt.Color(255, 255, 204));
        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setText("Price");

        jTextField_price.setToolTipText("Price will be REAL");
        jTextField_price.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField_priceKeyPressed(evt);
            }
        });

        jTable_food.setBackground(new java.awt.Color(204, 255, 204));
        jTable_food.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Food Category", "Food Name", "Food ID", "Price"
            }
        ));
        jTable_food.setToolTipText("Added food list");
        jTable_food.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_foodMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable_food);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setToolTipText("Button palet");

        jButton_add.setBackground(new java.awt.Color(153, 204, 255));
        jButton_add.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton_add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/food/icons/add .png"))); // NOI18N
        jButton_add.setText("Add");
        jButton_add.setToolTipText("Add Food");
        jButton_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_addActionPerformed(evt);
            }
        });

        jButton_search.setBackground(new java.awt.Color(153, 204, 255));
        jButton_search.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton_search.setIcon(new javax.swing.ImageIcon(getClass().getResource("/food/icons/search.png"))); // NOI18N
        jButton_search.setText("Search");
        jButton_search.setToolTipText("Search food ");
        jButton_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_searchActionPerformed(evt);
            }
        });

        jButton_update.setBackground(new java.awt.Color(153, 204, 255));
        jButton_update.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton_update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/food/icons/update.png"))); // NOI18N
        jButton_update.setText("Update");
        jButton_update.setToolTipText("Update food details");
        jButton_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_updateActionPerformed(evt);
            }
        });

        jButton_Remove.setBackground(new java.awt.Color(153, 204, 255));
        jButton_Remove.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton_Remove.setForeground(new java.awt.Color(204, 0, 0));
        jButton_Remove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/food/icons/remove.png"))); // NOI18N
        jButton_Remove.setText("Remove");
        jButton_Remove.setToolTipText("Remove Food");
        jButton_Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RemoveActionPerformed(evt);
            }
        });

        jButton_clear.setBackground(new java.awt.Color(153, 204, 255));
        jButton_clear.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton_clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/food/icons/clear button.png"))); // NOI18N
        jButton_clear.setText("Clear");
        jButton_clear.setToolTipText("Clear fields");
        jButton_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_clearActionPerformed(evt);
            }
        });

        jButton_PRINT.setBackground(new java.awt.Color(153, 204, 255));
        jButton_PRINT.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton_PRINT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/food/icons/report (2).png"))); // NOI18N
        jButton_PRINT.setText("Report");
        jButton_PRINT.setToolTipText("Update food details");
        jButton_PRINT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_PRINTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_PRINT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_add, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_search, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_Remove, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_update, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_clear, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton_add, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton_search, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton_PRINT, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jButton_Remove, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton_update, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Charts"));
        jPanel2.setToolTipText("");

        jButton_category.setBackground(new java.awt.Color(153, 204, 255));
        jButton_category.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton_category.setText("Category");
        jButton_category.setToolTipText("Update food details");
        jButton_category.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_categoryActionPerformed(evt);
            }
        });

        jButton_price.setBackground(new java.awt.Color(153, 204, 255));
        jButton_price.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton_price.setText("Price");
        jButton_price.setToolTipText("Update food details");
        jButton_price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_priceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jButton_category, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton_price, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_category)
                    .addComponent(jButton_price))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jButton1_Demo.setText("Demo");
        jButton1_Demo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1_DemoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 656, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(55, 55, 55)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField_foodid, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField_food_name, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField_price, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBox_Category, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(313, 313, 313)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1_Demo)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(784, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jComboBox_Category, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jTextField_food_name, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_foodid, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_price, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1_Demo)))
                .addGap(46, 46, 46)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(67, 67, 67)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(562, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox_CategoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox_CategoryMouseClicked

    }//GEN-LAST:event_jComboBox_CategoryMouseClicked

    private void jComboBox_CategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_CategoryActionPerformed

    }//GEN-LAST:event_jComboBox_CategoryActionPerformed

    private void jComboBox_CategoryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox_CategoryKeyPressed

        if (evt.getKeyCode() == 10) {

            if (jComboBox_Category.getSelectedItem().toString().equals("Category")) {
                JOptionPane.showMessageDialog(this, "Please select valid Food Category", "Error Message", JOptionPane.ERROR_MESSAGE);
            } else {

                jTextField_food_name.grabFocus();
            }
        }
    }//GEN-LAST:event_jComboBox_CategoryKeyPressed

    private void jTextField_food_nameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField_food_nameMouseClicked

    }//GEN-LAST:event_jTextField_food_nameMouseClicked

    private void jTextField_food_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_food_nameActionPerformed

    }//GEN-LAST:event_jTextField_food_nameActionPerformed

    private void jTextField_food_nameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_food_nameKeyPressed

        if (evt.getKeyCode() == 10) {
            if (jTextField_food_name.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter valid Food Name", "Error Message", JOptionPane.ERROR_MESSAGE);
            } else {
                jTextField_foodid.grabFocus();
            }
        }
    }//GEN-LAST:event_jTextField_food_nameKeyPressed

    private void jTextField_foodidMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField_foodidMouseClicked

    }//GEN-LAST:event_jTextField_foodidMouseClicked

    private void jTextField_foodidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_foodidActionPerformed

    }//GEN-LAST:event_jTextField_foodidActionPerformed

    private void jTextField_foodidKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_foodidKeyPressed

        if (evt.getKeyCode() == 10) {

            if (!jTextField_foodid.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please do not enter Food ID", "Error Message", JOptionPane.ERROR_MESSAGE);
            } else {
                jTextField_price.grabFocus();
            }
        }
    }//GEN-LAST:event_jTextField_foodidKeyPressed

    private void jTextField_priceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_priceKeyPressed

        if (evt.getKeyCode() == 10) {
            if (jTextField_price.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter valid Food Price", "Error Message", JOptionPane.ERROR_MESSAGE);
            } else {
                jButton_add.grabFocus();
            }
        }
    }//GEN-LAST:event_jTextField_priceKeyPressed

    private void jTable_foodMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_foodMouseClicked

        int row = jTable_food.getSelectedRow();

        String category = jTable_food.getValueAt(row, 0).toString();
        String foodName = jTable_food.getValueAt(row, 1).toString();
        String foodID = jTable_food.getValueAt(row, 2).toString();
        String Price = jTable_food.getValueAt(row, 3).toString();

        jComboBox_Category.setSelectedItem(category);
        jTextField_food_name.setText(foodName);
        jTextField_foodid.setText(foodID);
        jTextField_price.setText(Price);
    }//GEN-LAST:event_jTable_foodMouseClicked

    private void jButton_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_addActionPerformed

        if (Validation()) {
        } else {
            saveUser();
        }
    }//GEN-LAST:event_jButton_addActionPerformed

    private void jButton_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_searchActionPerformed

        String priceFrom = jTextField_price.getText();
        String name_like = jTextField_food_name.getText();
        
        
        //all
          if ("Category".equals(jComboBox_Category.getSelectedItem().toString())) {
                try {

                    String sql = "select * from food";
                    ps = conn.prepareStatement(sql);
                    rs = ps.executeQuery();

                    jTable_food.setModel(DbUtils.resultSetToTableModel(rs));

                } catch (Exception e) {
                       Common_method.errorMsg(); 
                }
            } 
//only id
  if ((jTextField_food_name.getText().isEmpty() == true) && (jTextField_price.getText().isEmpty() == true)) {

            try {

                String sql = "select * from food where foodID =? ";
                ps = conn.prepareStatement(sql);

                ps.setString(1, jTextField_foodid.getText() );

                rs = ps.executeQuery();

                jTable_food.setModel(DbUtils.resultSetToTableModel(rs));

            } catch (SQLException e) {
                 common_methods_.errorMsg();
            }
        }

 if ((jTextField_price.getText().isEmpty() == true) && (jTextField_food_name.getText().isEmpty())) {

            if (jTextField_foodid.getText() == "") {
                try {

                    String sql = "select * from food";
                    ps = conn.prepareStatement(sql);
                    rs = ps.executeQuery();

                    jTable_food.setModel(DbUtils.resultSetToTableModel(rs));

                } catch (Exception e) {
                       Common_method.errorMsg(); 
                }
            } 
            else {
                try {

                    String sql = "select * from food where foodID=? ";
                    ps = conn.prepareStatement(sql);

                    ps.setString(1, jTextField_foodid.getText());

                    rs = ps.executeQuery();

                    jTable_food.setModel(DbUtils.resultSetToTableModel(rs));

                } catch (Exception e) {
                       Common_method.errorMsg(); 
                }
            }

        }

        //category+price
        if (jTextField_food_name.getText().isEmpty() == true) {

            try {

                String sql = "select * from food where Price>? and category=?";
                ps = conn.prepareStatement(sql);

                ps.setString(1, jTextField_price.getText());
                ps.setString(2, jComboBox_Category.getSelectedItem().toString());
                rs = ps.executeQuery();

                jTable_food.setModel(DbUtils.resultSetToTableModel(rs));

            } catch (Exception e) {
                   Common_method.errorMsg(); 
            }
        }

        //category+name
        if (jTextField_price.getText().isEmpty() == true) {

            try {

                String sql = "select * from food where category=? and foodName like ?";
                ps = conn.prepareStatement(sql);

                ps.setString(1, jComboBox_Category.getSelectedItem().toString());
                ps.setString(2, "%"+jTextField_food_name.getText() + "%");
                rs = ps.executeQuery();

                jTable_food.setModel(DbUtils.resultSetToTableModel(rs));

            } catch (Exception e) {
                    Common_method.errorMsg(); 
            }
        }

        //name+price
        if (jComboBox_Category.getSelectedItem().toString() == "Category") {

            try {

                String sql = "select * from food where Price>? and foodName like ?";
                ps = conn.prepareStatement(sql);

                ps.setString(1, jTextField_price.getText());
                ps.setString(2, "%"+ jTextField_food_name.getText() + "%");
                rs = ps.executeQuery();

                jTable_food.setModel(DbUtils.resultSetToTableModel(rs));

            } catch (Exception e) {
                    Common_method.errorMsg(); 
            }
        }

        //only category
        if ((jTextField_price.getText().isEmpty() == true) && (jTextField_food_name.getText().isEmpty())) {

            if (jComboBox_Category.getSelectedItem().toString() == "All") {
                try {

                    String sql = "select * from food";
                    ps = conn.prepareStatement(sql);
                    rs = ps.executeQuery();

                    jTable_food.setModel(DbUtils.resultSetToTableModel(rs));

                } catch (Exception e) {
                       Common_method.errorMsg(); 
                }
            } else {
                try {

                    String sql = "select * from food where category=? ";
                    ps = conn.prepareStatement(sql);

                    ps.setString(1, jComboBox_Category.getSelectedItem().toString());

                    rs = ps.executeQuery();

                    jTable_food.setModel(DbUtils.resultSetToTableModel(rs));

                } catch (Exception e) {
                       Common_method.errorMsg(); 
                }
            }

        }

        //only name
        if ((jTextField_price.getText().isEmpty() == true) && (jComboBox_Category.getSelectedItem().toString() == "Category")) {

            try {

                String sql = "select * from food where foodName like ?";
                ps = conn.prepareStatement(sql);

                ps.setString(1,"%"+jTextField_food_name.getText() + "%");

                rs = ps.executeQuery();

                jTable_food.setModel(DbUtils.resultSetToTableModel(rs));

            } catch (Exception e) {
                   Common_method.errorMsg(); 
            }
        }
        
        

        //only price
        if ((jTextField_food_name.getText().isEmpty()) && (jComboBox_Category.getSelectedItem().toString() == "Category")) {

            try {

                String sql = "select * from food where Price>? ";
                ps = conn.prepareStatement(sql);

                ps.setString(1, jTextField_price.getText());

                rs = ps.executeQuery();

                jTable_food.setModel(DbUtils.resultSetToTableModel(rs));

            } catch (Exception e) {
                   Common_method.errorMsg(); 
            }
        }
    }//GEN-LAST:event_jButton_searchActionPerformed

    private void jButton_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_updateActionPerformed

        int x = JOptionPane.showConfirmDialog(null, "Do You Really Want To Update?");
        if (x == 0) {
            String category = jComboBox_Category.getSelectedItem().toString();
            String foodName = jTextField_food_name.getText();
            String foodID = jTextField_foodid.getText();
            String Price = jTextField_price.getText();

            String sql = "UPDATE food SET category = '" + category + "', foodName = '" + foodName + "',Price = '" + Price + "' WHERE foodID = '" + foodID + "'";
            try {
                ps = conn.prepareStatement(sql);
                ps.execute();
                foodTableLoad();
                    Common_method.successMsg();
                    foodid();
            } catch (Exception e) {
                   Common_method.errorMsg(); 
            }
        }
    }//GEN-LAST:event_jButton_updateActionPerformed

    private void jButton_RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RemoveActionPerformed

        int x = JOptionPane.showConfirmDialog(null, "Do You Really Want to Delete this records?");

        if (x == 0) {
            String id = jTextField_foodid.getText();
            String category = jComboBox_Category.getSelectedItem().toString();
            if (id.equals(jTextField_foodid.getText()) && !"Category".equals(category)) {
                String sql = "DELETE FROM food WHERE foodID = '" + id + "'";

                try {
                    ps = conn.prepareStatement(sql);
                    ps.execute();
                    foodTableLoad();
                    fieldClear();
                    Common_method.successMsgDelete();
                    foodid();
                } catch (Exception e) {
                       Common_method.errorMsg(); 
                }
            } else {
                final JPanel panel = new JPanel();

                JOptionPane.showMessageDialog(panel, "Warning!!! Can't delete details without selecting a food ID ", "KOGA restaurant",
                    JOptionPane.WARNING_MESSAGE);
            }

        }

    }//GEN-LAST:event_jButton_RemoveActionPerformed

    private void jButton_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_clearActionPerformed

        fieldClear();
    }//GEN-LAST:event_jButton_clearActionPerformed

    private void jButton_PRINTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_PRINTActionPerformed
        // TODO add your handling code here:
      
        chart();
//         MessageFormat header =new MessageFormat("Report print");
//        MessageFormat footer =new MessageFormat("page{0,number,integer}");
//        try{
//            jTable_food.print(JTable.PrintMode.FIT_WIDTH, header, footer);
//           
//        }catch(java.awt.print.PrinterException e){
//            System.err.format("can not print %s%n", e.getMessage());
//        }
    }//GEN-LAST:event_jButton_PRINTActionPerformed

    private void jButton_categoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_categoryActionPerformed
        // TODO add your handling code here:
        genGraph1();
    }//GEN-LAST:event_jButton_categoryActionPerformed

    private void jButton_priceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_priceActionPerformed
        // TODO add your handling code here:
        graph_price();
    }//GEN-LAST:event_jButton_priceActionPerformed

    private void jButton1_DemoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1_DemoActionPerformed
        // TODO add your handling code here:
         jComboBox_Category.setSelectedItem("Juice");
        jTextField_food_name.setText("Mix Fruit Special");
        jTextField_price.setText("250.0");
    }//GEN-LAST:event_jButton1_DemoActionPerformed
    private void jTextField_food_nameKeyPressed1(java.awt.event.KeyEvent evt) {                                                
      

        if (evt.getKeyCode() == 10) {
            if (jTextField_food_name.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter valid Food Name", "Error Message", JOptionPane.ERROR_MESSAGE);
            } else {
                jTextField_foodid.grabFocus();
            }
        }
    }                                               

//    private void jTextField_foodidKeyPressed1(java.awt.event.KeyEvent evt) {                                             
// 
//        if (evt.getKeyCode() == 10) {
//          
//            if (!jTextField_foodid.getText().isEmpty()) {
//                JOptionPane.showMessageDialog(this, "Please do not enter Food ID", "Error Message", JOptionPane.ERROR_MESSAGE);
//            } else {
//                jTextField_price.grabFocus();
//            }
//        }
//    }                                            

    private void jTextField_priceKeyPressed1(java.awt.event.KeyEvent evt) {                                            
     
        if (evt.getKeyCode() == 10) {
            if (jTextField_price.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter valid Food Price", "Error Message", JOptionPane.ERROR_MESSAGE);
            } else {
                jButton_add.grabFocus();
            }
        }
    }                                           

    private void jTable_foodMouseClicked1(java.awt.event.MouseEvent evt) {                                         
  
        int row = jTable_food.getSelectedRow();

        String category = jTable_food.getValueAt(row, 0).toString();
        String foodName = jTable_food.getValueAt(row, 1).toString();
        String foodID = jTable_food.getValueAt(row, 2).toString();
        String Price = jTable_food.getValueAt(row, 3).toString();

        jComboBox_Category.setSelectedItem(category);
        jTextField_food_name.setText(foodName);
        jTextField_foodid.setText(foodID);
        jTextField_price.setText(Price);
    }                                        

    private void jButton_updateActionPerformed1(java.awt.event.ActionEvent evt) {                                               
   
        int x = JOptionPane.showConfirmDialog(null, "Do You Really Want To Update?");
        if (x == 0) {
            String category = jComboBox_Category.getSelectedItem().toString();
            String foodName = jTextField_food_name.getText();
            String foodID = jTextField_foodid.getText();
            String Price = jTextField_price.getText();

            String sql = "UPDATE food SET category = '" + category + "', foodName = '" + foodName + "',Price = '" + Price + "' WHERE foodID = '" + foodID + "'";
            try {
                ps = conn.prepareStatement(sql);
                ps.execute();
                foodTableLoad();
                   Common_method. successMsg();
            } catch (Exception e) {
                   Common_method.errorMsg(); 
            }
        }
    }                                              

    private void jButton_RemoveActionPerformed1(java.awt.event.ActionEvent evt) {                                               
     
        int x = JOptionPane.showConfirmDialog(null, "Do You Really Want to Delete this records?");

        if (x == 0) {
            String id = jTextField_foodid.getText();
            String category = jComboBox_Category.getSelectedItem().toString();
            if (id.equals(jTextField_foodid.getText()) && !"Category".equals(category)) {
                String sql = "DELETE FROM food WHERE foodID = '" + id + "'";

                try {
                    ps = conn.prepareStatement(sql);
                    ps.execute();
                    foodTableLoad();
                    fieldClear();
                    Common_method.successMsgDelete();
                } catch (Exception e) {
                       Common_method.errorMsg(); 
                }
            } else {
                final JPanel panel = new JPanel();

                JOptionPane.showMessageDialog(panel, "Warning!!! Can't delete details without selecting a food ID ", "KOGA restaurant",
                        JOptionPane.WARNING_MESSAGE);
            }

        }


    }                                              

    private void jTextField_foodidActionPerformed1(java.awt.event.ActionEvent evt) {                                                  
        

    }                                                 

    private void jTextField_food_nameActionPerformed1(java.awt.event.ActionEvent evt) {                                                     
   
    }                                                    

    private void jTextField_foodidMouseClicked1(java.awt.event.MouseEvent evt) {                                               
      

    }                                              

    private void jComboBox_CategoryActionPerformed1(java.awt.event.ActionEvent evt) {                                                   

    }                                                  

    private void jComboBox_CategoryKeyPressed1(java.awt.event.KeyEvent evt) {                                              
    
        if (evt.getKeyCode() == 10) {

            if (jComboBox_Category.getSelectedItem().toString().equals("Category")) {
                JOptionPane.showMessageDialog(this, "Please select valid Food Category", "Error Message", JOptionPane.ERROR_MESSAGE);
            } else {
               
                jTextField_food_name.grabFocus();
            }
        }
    }                                             

    private void jComboBox_CategoryMouseClicked1(java.awt.event.MouseEvent evt) {                                                
    
    }                                               

    private void jTextField_food_nameMouseClicked1(java.awt.event.MouseEvent evt) {                                                  
    
    }                                                 

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FoodI1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FoodI1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FoodI1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FoodI1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FoodI1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1_Demo;
    private javax.swing.JButton jButton_PRINT;
    private javax.swing.JButton jButton_Remove;
    private javax.swing.JButton jButton_add;
    private javax.swing.JButton jButton_category;
    private javax.swing.JButton jButton_clear;
    private javax.swing.JButton jButton_price;
    private javax.swing.JButton jButton_search;
    private javax.swing.JButton jButton_update;
    private javax.swing.JComboBox<String> jComboBox_Category;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable_food;
    private javax.swing.JTextField jTextField_food_name;
    private javax.swing.JTextField jTextField_foodid;
    private javax.swing.JTextField jTextField_price;
    // End of variables declaration//GEN-END:variables

    private boolean Validation() {
        boolean bool = false;
        try {
            if (jComboBox_Category.getSelectedItem().toString().equals("Category")) {
                JOptionPane.showMessageDialog(this, "Please select correct Category", "Error Message", JOptionPane.ERROR_MESSAGE);
                bool = true;

            } else if (jTextField_food_name.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please select correct Food Name", "Error Message", JOptionPane.ERROR_MESSAGE);
                bool = true;

            }
//            else if (!jTextField_foodid.getText().isEmpty()) {
//                JOptionPane.showMessageDialog(this, "Please Do not enter  Food ID ", "Error Message", JOptionPane.ERROR_MESSAGE);
//                bool = true;
//            } 
            else if (jTextField_price.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter valid Food Price ", "Error Message", JOptionPane.ERROR_MESSAGE);
                bool = true;
            }
                    else if ((!jTextField_food_name.getText().matches("[a-zA-Z]"))&&(jTextField_food_name.getText().matches("[0-9 .]+"))) {

                JOptionPane.showMessageDialog(this, "Please enter Alphabetic input for Food Name ", "Error Message", JOptionPane.ERROR_MESSAGE);
               bool = true;
            }
                
            else if ((!jTextField_price.getText().matches("[0-9 .]+"))&&(jTextField_price.getText().matches("[a-zA-Z]")) ){

                JOptionPane.showMessageDialog(this, "Please enter numeric input for Food Price ", "Error Message", JOptionPane.ERROR_MESSAGE);
              bool = true;
            } 

                }catch (HeadlessException e) {
               Common_method.errorMsg(); 
        }

                return bool;
            }

    

    private void saveUser() {

        String category = jComboBox_Category.getSelectedItem().toString();
        String foodName = jTextField_food_name.getText();
        
        double Price = Double.parseDouble(jTextField_price.getText());

        try {
            String q = "INSERT INTO food(category,foodName,Price) values ('" + category + "','" + foodName + "','" + Price + "')";
            ps = conn.prepareStatement(q);
            ps.execute();

            fieldClear();
            foodTableLoad();
                Common_method.successMsgAdd();
                foodid();

        } catch (SQLException e) {
            
               Common_method.errorMsg(); 

        }
    }

    private void fieldClear() {
        try {
            jComboBox_Category.setSelectedItem("Category");
            jTextField_food_name.setText("");
            jTextField_foodid.setText("");
            jTextField_price.setText("");

        } catch (Exception e) {
               Common_method.errorMsg(); 
        }
    }

    private void foodTableLoad() {

        try {
            String sql = "SELECT category,foodName,foodID,Price FROM food";
            ps = conn.prepareStatement(sql);
            rs = ps.executeQuery();

            jTable_food.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException e) {
                Common_method.errorMsg(); 
        }
    }

//    private void successMsg() {
//        final JPanel panel = new JPanel();
//
//        JOptionPane.showMessageDialog(panel, "Successfully updated your modification.. ", "KOGA restaurant",
//                JOptionPane.INFORMATION_MESSAGE);
//
//    }

//    private void errorMsg() {
//        final JPanel panel = new JPanel();
//
//        JOptionPane.showMessageDialog(panel, "Warning!!! Something in Wrong. ", "KOGA restaurant",
//                JOptionPane.WARNING_MESSAGE);
//
//    }
//
//    private void successMsgAdd() {
//  final JPanel panel = new JPanel();
//
//        JOptionPane.showMessageDialog(panel, "Successfully Added your Details.. ", "KOGA restaurant",
//                JOptionPane.INFORMATION_MESSAGE);
//    }

//    private void successMsgDelete() {
//        final JPanel panel = new JPanel();
//
//        JOptionPane.showMessageDialog(panel, "Successfully Deleted your Details.. ", "KOGA restaurant",
//                JOptionPane.INFORMATION_MESSAGE);
//  }

    private void foodid() {
        int foodid = 0;
       try {
                    String q = "SELECT foodID FROM food";
                    ps = conn.prepareStatement(q);
                    rs = ps.executeQuery();

                    while (rs.next()) {
                        foodid = rs.getInt(1);
                    }
                    foodid = foodid + 1;
                    jTextField_foodid.setText(""+foodid);
                    //   System.out.println(""+order_m);

                } catch (Exception e) {
                } }

  //  private void report() {
   
               
    
    

    private void chart() {
    try{
                        int sr = jTable_food.getRowCount();
                        int cc = jTable_food.getColumnCount();
                        Document document = new Document();
                        PdfWriter.getInstance(document, new FileOutputStream("Report of Foods.pdf"));
                        document.open();
                     
                        document.add(new Paragraph(""));//Image title
                     
                        
                        document.add(new Paragraph("Koga Foods",FontFactory.getFont(FontFactory.TIMES_BOLD, 18, Font.BOLD)));
                          document.add(new Paragraph("No. 83/1",FontFactory.getFont(FontFactory.TIMES_ITALIC, 10, Font.NORMAL)));
                            document.add(new Paragraph("Heenatikumbura,",FontFactory.getFont(FontFactory.TIMES_ITALIC, 10, Font.NORMAL)));
                                 document.add(new Paragraph("Thalangama North,",FontFactory.getFont(FontFactory.TIMES_ITALIC, 10, Font.NORMAL)));
                            document.add(new Paragraph("Koswattha,",FontFactory.getFont(FontFactory.TIMES_ITALIC, 10, Font.NORMAL)));
                            document.add(new Paragraph("0772342134,",FontFactory.getFont(FontFactory.TIMES_ITALIC, 10, Font.NORMAL)));

                            document.add(new Paragraph(new Date().toString()));
                        document.add(new Paragraph("---------------------------------------------------------------------------------"));
                        PdfPTable table = new PdfPTable(cc);
                        
                        PdfPCell cell = new PdfPCell(new Paragraph("Details of Food"));
                        cell .setColspan(cc);
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        cell.setBackgroundColor(BaseColor.GREEN);
                        table.addCell(cell);
                        for(int i=0;i<jTable_food.getColumnCount();i++){
                            
                            PdfPCell cellCol = new PdfPCell(new Paragraph(jTable_food.getColumnName(i),FontFactory.getFont(FontFactory.TIMES_BOLD, 10, Font.BOLD)));
                            cellCol.setColspan(1);
                            cellCol.setHorizontalAlignment(Element.ALIGN_CENTER);
                            
                            table.addCell(cellCol);
   
                        }
                        if(sr>0)
                            for(int i=0;i<sr;i++){
                                
                                for(int j=0;j<cc;j++)   
                                    if(jTable_food.getValueAt(i, j)!=null)
                                        table.addCell(new Paragraph(jTable_food.getValueAt(i, j).toString(),FontFactory.getFont(FontFactory.TIMES_BOLD, 8, Font.NORMAL)));
                                    else
                                        table.addCell(" ");

                            }
       
                        document.add(table);
                        document.close();
                        JOptionPane.showMessageDialog(null,"Report Saved");
                    
                        try{
                        
                            Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler "+
                                    "E:\\hotelandresturent\\Report of Foods.pdf");
                        
                        }catch(Exception ex){
                            
                            JOptionPane.showMessageDialog(null, ex);
                        }
                    
        }catch(Exception ex){
                
                         JOptionPane.showMessageDialog(null, ex);
        }
    
    }

    private void genGraph1() {
        int sr;
                String Category; 
                sr = jTable_food.getRowCount();
                
   
                    DefaultPieDataset dataset = new DefaultPieDataset();
 
                            
                        for(int i=0;i<sr;i++)
                        {
                        
                            Category=jTable_food.getValueAt(i, 0).toString();

                            int count=0;
                            for(int j=0;j<sr;j++){
                                if(jTable_food.getValueAt(j, 0).toString().equals(Category))
                                    count++;
                                
                            }
                            
                            System.out.println(count);
                            dataset.setValue ("'"+Category+"'", new Integer (count));
                        }
                
                

 
                    JFreeChart chart = ChartFactory.createPieChart("Categories of Food", dataset, true, true, true);
 
                    ChartFrame yourFrame = new ChartFrame ("Koga Foods", chart);
 
                    yourFrame.setSize(600, 600);
 
                    yourFrame.setVisible(true);
                    
                    
         
    
    }   

    private void graph_price() {
      int sr,rc;
                String Price; 
                sr = jTable_food.getRowCount();
                
   
                    DefaultPieDataset dataset = new DefaultPieDataset();
 
                            
                        for(int i=0;i<sr;i++)
                        {
                        
                            Price=jTable_food.getValueAt(i, 3).toString();

                            int count=0;
                            for(int j=0;j<sr;j++){
                                if(jTable_food.getValueAt(j, 3).toString().equals(Price))
                                    count++;
                                
                            }
                            
                            System.out.println(count);
                            dataset.setValue ("'"+Price+"'", new Integer (count));
                        }
                
                

 
                    JFreeChart chart = ChartFactory.createPieChart("Prices of Food", dataset, true, true, true);
 
                    ChartFrame yourFrame = new ChartFrame ("Koga Foods", chart);
 
                    yourFrame.setSize(600, 600);
 
                    yourFrame.setVisible(true);
                    
                    
         
    
    }




}







