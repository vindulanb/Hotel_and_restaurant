package food;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Admin
 */
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import food.AddFoods;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import net.proteanit.sql.DbUtils;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;

public class OrderI extends javax.swing.JInternalFrame {

    /**
     * Creates new form OrderI
     */
    Connection conn = null;
    PreparedStatement ps = null;
    ResultSet rs = null;

    public static int order_m = 0;
    public static String order_type = "";
    

    public OrderI() {
        ((javax.swing.plaf.basic.BasicInternalFrameUI) this.getUI()).setNorthPane(null);
        initComponents();
        conn = Dbconnecter.con();
        oid();
        orderTableLoad();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1_orderType = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1_orderId = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1_order = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton3_add = new javax.swing.JButton();
        jButton4_search = new javax.swing.JButton();
        jButton5_edit = new javax.swing.JButton();
        jButton6_remove = new javax.swing.JButton();
        jButton_clear = new javax.swing.JButton();
        jButton_buyer = new javax.swing.JButton();
        jButton_PRINT = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton_order_type = new javax.swing.JButton();
        jButton_amount = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jComboBox1_orderType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Order Type", "Dine In", "Take Away", "BUYERS" }));
        jComboBox1_orderType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1_orderTypeActionPerformed(evt);
            }
        });
        jComboBox1_orderType.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox1_orderTypeKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("Order Type");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("Order ID");

        jTextField1_orderId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1_orderIdKeyPressed(evt);
            }
        });

        jTable1_order.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Order Type", "Order ID", "Order Time", "Total Amount"
            }
        ));
        jTable1_order.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1_orderMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1_order);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButton3_add.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton3_add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/food/icons/add .png"))); // NOI18N
        jButton3_add.setText("Add");
        jButton3_add.setMaximumSize(null);
        jButton3_add.setMinimumSize(new java.awt.Dimension(139, 59));
        jButton3_add.setPreferredSize(new java.awt.Dimension(95, 37));
        jButton3_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3_addActionPerformed(evt);
            }
        });

        jButton4_search.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton4_search.setIcon(new javax.swing.ImageIcon(getClass().getResource("/food/icons/search.png"))); // NOI18N
        jButton4_search.setText("Search");
        jButton4_search.setMaximumSize(null);
        jButton4_search.setMinimumSize(new java.awt.Dimension(139, 59));
        jButton4_search.setPreferredSize(new java.awt.Dimension(95, 37));
        jButton4_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4_searchActionPerformed(evt);
            }
        });

        jButton5_edit.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton5_edit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/food/icons/update.png"))); // NOI18N
        jButton5_edit.setText("Update");
        jButton5_edit.setMaximumSize(null);
        jButton5_edit.setMinimumSize(new java.awt.Dimension(139, 59));
        jButton5_edit.setPreferredSize(new java.awt.Dimension(95, 37));
        jButton5_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5_editActionPerformed(evt);
            }
        });

        jButton6_remove.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton6_remove.setForeground(new java.awt.Color(204, 0, 0));
        jButton6_remove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/food/icons/remove.png"))); // NOI18N
        jButton6_remove.setText("Remove");
        jButton6_remove.setMaximumSize(null);
        jButton6_remove.setMinimumSize(new java.awt.Dimension(139, 59));
        jButton6_remove.setPreferredSize(new java.awt.Dimension(95, 37));
        jButton6_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6_removeActionPerformed(evt);
            }
        });

        jButton_clear.setBackground(new java.awt.Color(153, 204, 255));
        jButton_clear.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton_clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/food/icons/clear button.png"))); // NOI18N
        jButton_clear.setText("Clear");
        jButton_clear.setToolTipText("Clear fields");
        jButton_clear.setMaximumSize(null);
        jButton_clear.setMinimumSize(new java.awt.Dimension(139, 59));
        jButton_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_clearActionPerformed(evt);
            }
        });

        jButton_buyer.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton_buyer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/food/icons/Buyer.png"))); // NOI18N
        jButton_buyer.setText("Buyers");
        jButton_buyer.setMaximumSize(null);
        jButton_buyer.setMinimumSize(new java.awt.Dimension(139, 59));
        jButton_buyer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_buyerActionPerformed(evt);
            }
        });

        jButton_PRINT.setBackground(new java.awt.Color(153, 204, 255));
        jButton_PRINT.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton_PRINT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/food/icons/report (2).png"))); // NOI18N
        jButton_PRINT.setText("REPORT");
        jButton_PRINT.setToolTipText("Update food details");
        jButton_PRINT.setMinimumSize(new java.awt.Dimension(139, 59));
        jButton_PRINT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_PRINTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6_remove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_PRINT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4_search, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3_add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_buyer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5_edit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3_add, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4_search, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton6_remove, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton5_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton_buyer, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton_PRINT, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton3_add.getAccessibleContext().setAccessibleName("");
        jButton4_search.getAccessibleContext().setAccessibleName("");
        jButton5_edit.getAccessibleContext().setAccessibleName("");
        jButton6_remove.getAccessibleContext().setAccessibleName("");
        jButton_clear.getAccessibleContext().setAccessibleName("");
        jButton_buyer.getAccessibleContext().setAccessibleName("");
        jButton_PRINT.getAccessibleContext().setAccessibleName("");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Charts"));
        jPanel2.setToolTipText("");

        jButton_order_type.setBackground(new java.awt.Color(153, 204, 255));
        jButton_order_type.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_order_type.setText("Order Type");
        jButton_order_type.setToolTipText("Update food details");
        jButton_order_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_order_typeActionPerformed(evt);
            }
        });

        jButton_amount.setBackground(new java.awt.Color(153, 204, 255));
        jButton_amount.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_amount.setText("Amount");
        jButton_amount.setToolTipText("Update food details");
        jButton_amount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_amountActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jButton_order_type, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton_amount, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_order_type)
                    .addComponent(jButton_amount))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField1_orderId)
                                    .addComponent(jComboBox1_orderType, 0, 209, Short.MAX_VALUE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 614, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox1_orderType, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1_orderId, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1_orderTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1_orderTypeActionPerformed
        // TODO add your handling code here:

        String id = jComboBox1_orderType.getSelectedItem().toString();
        if (null != id) {
            if (id.equals("BUYERS")) {

                jButton3_add.setEnabled(false);
                jButton_buyer.setEnabled(true);
            } else if (id.equals("Dine In")) {

                jButton_buyer.setEnabled(false);
                jButton3_add.setEnabled(true);

            } else if (id.equals("Take Away")) {

                jButton_buyer.setEnabled(false);
                jButton3_add.setEnabled(true);

            }
        }
    }//GEN-LAST:event_jComboBox1_orderTypeActionPerformed

    private void jComboBox1_orderTypeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox1_orderTypeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10) {

            if (jComboBox1_orderType.getSelectedItem().toString().equals("Order Type")) {
                JOptionPane.showMessageDialog(this, "Please select valid Order Type", "Error Message", JOptionPane.ERROR_MESSAGE);
            } else {

                jTextField1_orderId.grabFocus();
            }
        }
    }//GEN-LAST:event_jComboBox1_orderTypeKeyPressed

    private void jTextField1_orderIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1_orderIdKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1_orderIdKeyPressed

    private void jTable1_orderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1_orderMouseClicked
        // TODO add your handling code here

        int row = jTable1_order.getSelectedRow();

        String category = jTable1_order.getValueAt(row, 0).toString();
        String foodName = jTable1_order.getValueAt(row, 1).toString();

        jComboBox1_orderType.setSelectedItem(category);
        jTextField1_orderId.setText(foodName);
    }//GEN-LAST:event_jTable1_orderMouseClicked

    private void jButton3_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3_addActionPerformed
        // TODO add your handling code here:
        //order_m=parseInt(jTextField1_orderId.getText() );
        try {
            if (Validation_order()) {
            } else {
                oid();
//                try {
//                    String q = "SELECT order_ID FROM order_details";
//                    ps = conn.prepareStatement(q);
//                    rs = ps.executeQuery();
//
//                    while (rs.next()) {
//                        order_m = rs.getInt(1);
//                    }
//                    order_m = order_m + 1;
//                    //   System.out.println(""+order_m);
//                int oid =order_m;
//                } catch (Exception e) {
//                }
                saveOrder();

            }
        } catch (NumberFormatException e) {
            Common_method.errorMsg();
            //  System.out.println(e);
        }

        //order_m=(jTextField1_orderId.getText() .toString());
    }//GEN-LAST:event_jButton3_addActionPerformed

    private void jButton4_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4_searchActionPerformed
        // TODO add your handling code here:

        //only orderType
      

            if (jComboBox1_orderType.getSelectedItem().toString() == "Order Type") {
                try {

                    String sql = "select * from order_details";
                    ps = conn.prepareStatement(sql);
                    rs = ps.executeQuery();

                    jTable1_order.setModel(DbUtils.resultSetToTableModel(rs));

                } catch (Exception e) {
                    Common_method.errorMsg();
                }
            } else {
                try {

                    String sql = "select * from order_details where order_Type = ? ";
                    ps = conn.prepareStatement(sql);

                    ps.setString(1, jComboBox1_orderType.getSelectedItem().toString());

                    rs = ps.executeQuery();

                    jTable1_order.setModel(DbUtils.resultSetToTableModel(rs));

                } catch (Exception e) {
                     Common_method.errorMsg();
                }
            }

        
    }//GEN-LAST:event_jButton4_searchActionPerformed

    private void jButton5_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5_editActionPerformed
        // TODO add your handling code here:
        int x = JOptionPane.showConfirmDialog(null, "Do You Really Want To Update?");
        if (x == 0) {
            String order_Type = jComboBox1_orderType.getSelectedItem().toString();
            String order_ID = jTextField1_orderId.getText();

            String sql = "UPDATE order_details SET order_Type = '" + order_Type + "', order_ID = '" + order_ID + "'";
            try {
                ps = conn.prepareStatement(sql);
                ps.execute();
                orderTableLoad();
                Common_method.successMsg();
            } catch (Exception e) {
                Common_method.errorMsg();
            }
        }
    }//GEN-LAST:event_jButton5_editActionPerformed

    private void jButton6_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6_removeActionPerformed
        // TODO add your handling code here:
        int x = JOptionPane.showConfirmDialog(null, "Do You Really Want to Delete this records?");

        if (x == 0) {
            String id = jTextField1_orderId.getText();
            String order_Type = jComboBox1_orderType.getSelectedItem().toString();
            if (id.equals(jTextField1_orderId.getText()) && !"Order Type".equals(order_Type)) {
                String sql = "DELETE FROM order_details WHERE order_ID  = '" + id + "'";

                try {
                    ps = conn.prepareStatement(sql);
                    ps.execute();
                    orderTableLoad();
                    fieldClearOrder();
                   Common_method. successMsgDelete();
                } catch (SQLException e) {
                      Common_method.errorMsg();
                }
            } else {
                final JPanel panel = new JPanel();

                JOptionPane.showMessageDialog(panel, "Warning!!! Can't delete details without selecting a Order ID ", "KOGA restaurant",
                        JOptionPane.WARNING_MESSAGE);
            }

        }

    }//GEN-LAST:event_jButton6_removeActionPerformed

    private void jButton_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_clearActionPerformed
        // TODO add your handling code here:
        fieldClearOrder();
    }//GEN-LAST:event_jButton_clearActionPerformed

    private void jButton_buyerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_buyerActionPerformed
        // TODO add your handling code here:

        try {
            if (Validation_order()) {
            } else {

                //     order_m = parseInt(jTextField1_orderId.getText());
                //             order_type = (String)jComboBox1_orderType .getSelectedItem();
                try {
                    String q = "SELECT order_ID FROM order_details";
                    ps = conn.prepareStatement(q);
                    rs = ps.executeQuery();

                    while (rs.next()) {
                        order_m = rs.getInt(1);
                    }
                    order_m = order_m + 1;
                    //   System.out.println(""+order_m);

                } catch (Exception e) {
                }
                saveOrderBuyer();

            }
        } catch (NumberFormatException e) {
         Common_method.errorMsg();
            //  System.out.println(e);
        }

        //order_m=(jTextField1_orderId.getText() .toString());

    }//GEN-LAST:event_jButton_buyerActionPerformed

    private void jButton_PRINTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_PRINTActionPerformed
        // TODO add your handling code here:

      REPORT();
        //         MessageFormat header =new MessageFormat("Report print");
        //        MessageFormat footer =new MessageFormat("page{0,number,integer}");
        //        try{
            //            jTable_food.print(JTable.PrintMode.FIT_WIDTH, header, footer);
            //
            //        }catch(java.awt.print.PrinterException e){
            //            System.err.format("can not print %s%n", e.getMessage());
            //        }
    }//GEN-LAST:event_jButton_PRINTActionPerformed

    private void jButton_order_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_order_typeActionPerformed
        // TODO add your handling code here:
        genGraph1();
    }//GEN-LAST:event_jButton_order_typeActionPerformed

    private void jButton_amountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_amountActionPerformed
        // TODO add your handling code here:
        graph_price();
    }//GEN-LAST:event_jButton_amountActionPerformed
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3_add;
    private javax.swing.JButton jButton4_search;
    private javax.swing.JButton jButton5_edit;
    private javax.swing.JButton jButton6_remove;
    private javax.swing.JButton jButton_PRINT;
    private javax.swing.JButton jButton_amount;
    private javax.swing.JButton jButton_buyer;
    private javax.swing.JButton jButton_clear;
    private javax.swing.JButton jButton_order_type;
    private javax.swing.JComboBox<String> jComboBox1_orderType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTable1_order;
    private javax.swing.JTextField jTextField1_orderId;
    // End of variables declaration//GEN-END:variables

    private boolean Validation_order() {
        boolean bool = false;
        try {
            if (jComboBox1_orderType.getSelectedItem().toString().equals("Order Type")) {
                JOptionPane.showMessageDialog(this, "Please select correct Order Type", "Error Message", JOptionPane.ERROR_MESSAGE);
                bool = true;

                
 } 
//else if (!jTextField1_orderId.getText().isEmpty()) {
//                JOptionPane.showMessageDialog(this, "Please do not enter Order ID", "Error Message", JOptionPane.ERROR_MESSAGE);
//                bool = true;
//
//            }

        } catch (Exception e) {
              Common_method.errorMsg();
            //   System.out.println(e);
        }

        return bool;
    }

    private void saveOrder() {
        order_type = jComboBox1_orderType.getSelectedItem().toString();

        addfoodsfororder();

    }

    private void fieldClearOrder() {
        try {
            jComboBox1_orderType.setSelectedItem("Order Type");
            jTextField1_orderId.setText("");

        } catch (Exception e) {
              Common_method.errorMsg();
        }

    }

    private void addfoodsfororder() {

        AddFoods x = new AddFoods();
        x.setVisible(true);
//        this.dispose();
    }

//    private void successMsgOrder() {
//        final JPanel panel = new JPanel();
//
//        JOptionPane.showMessageDialog(panel, "Successfully updated your modification.. ", "KOGA restaurant",
//                JOptionPane.OK_OPTION);
//
//    }

//    private void errorMsgorder() {
//        final JPanel panel = new JPanel();
//
//        JOptionPane.showMessageDialog(panel, "Warning!!! Something in Wrong. ", "KOGA restaurant",
//                JOptionPane.WARNING_MESSAGE);
//
//    }

    private void orderTableLoad() {

        try {
            String sql = "SELECT order_Type,order_ID,order_Time,price FROM order_details";
            ps = conn.prepareStatement(sql);
            rs = ps.executeQuery();

            jTable1_order.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException e) {
          Common_method.errorMsg();
            // System.out.println(e);
        }
    }

//    private void successMsgOrderDelete() {
//        final JPanel panel = new JPanel();
//
//        JOptionPane.showMessageDialog(panel, "Successfully Deleted your details.. ", "KOGA restaurant",
//                JOptionPane.OK_OPTION);
//    }

    private void addfoodsforBuyer() {
        addMenuForBuyers x = new addMenuForBuyers();
        x.setVisible(true);
//        this.dispose();

    }

    private void saveOrderBuyer() {
        order_type = jComboBox1_orderType.getSelectedItem().toString();

        addfoodsforBuyer();

    }

    private void oid() {
                      try {
                    String q = "SELECT order_ID FROM order_details";
                    ps = conn.prepareStatement(q);
                    rs = ps.executeQuery();

                    while (rs.next()) {
                        order_m = rs.getInt(1);
                    }
                    order_m = order_m + 1;
                    //   System.out.println(""+order_m);
                int oid =order_m;
                jTextField1_orderId.setText(""+oid);
                } catch (Exception e) {
                } }

    private void REPORT() {
    try{
                        int sr = jTable1_order.getRowCount();
                        int cc = jTable1_order.getColumnCount();
                        Document document = new Document();
                        PdfWriter.getInstance(document, new FileOutputStream("Report of orders.pdf"));
                        document.open();
                     
                        document.add(new Paragraph(""));//Image title
                     
                        
                        document.add(new Paragraph("Koga Foods",FontFactory.getFont(FontFactory.TIMES_BOLD, 18, Font.BOLD)));
                          document.add(new Paragraph("No. 83/1",FontFactory.getFont(FontFactory.TIMES_ITALIC, 10, Font.NORMAL)));
                            document.add(new Paragraph("Heenatikumbura,",FontFactory.getFont(FontFactory.TIMES_ITALIC, 10, Font.NORMAL)));
                                 document.add(new Paragraph("Thalangama North,",FontFactory.getFont(FontFactory.TIMES_ITALIC, 10, Font.NORMAL)));
                            document.add(new Paragraph("Koswattha,",FontFactory.getFont(FontFactory.TIMES_ITALIC, 10, Font.NORMAL)));
                            document.add(new Paragraph("0772342134,",FontFactory.getFont(FontFactory.TIMES_ITALIC, 10, Font.NORMAL)));

                            document.add(new Paragraph(new Date().toString()));
                        document.add(new Paragraph("---------------------------------------------------------------------------------"));
                        PdfPTable table = new PdfPTable(cc);
                        
                        PdfPCell cell = new PdfPCell(new Paragraph("Details of Orders"));
                        cell .setColspan(cc);
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        cell.setBackgroundColor(BaseColor.GREEN);
                        table.addCell(cell);
                        for(int i=0;i<jTable1_order.getColumnCount();i++){
                            
                            PdfPCell cellCol = new PdfPCell(new Paragraph(jTable1_order.getColumnName(i),FontFactory.getFont(FontFactory.TIMES_BOLD, 10, Font.BOLD)));
                            cellCol.setColspan(1);
                            cellCol.setHorizontalAlignment(Element.ALIGN_CENTER);
                            
                            table.addCell(cellCol);
   
                        }
                        if(sr>0)
                            for(int i=0;i<sr;i++){
                                
                                for(int j=0;j<cc;j++)   
                                    if(jTable1_order.getValueAt(i, j)!=null)
                                        table.addCell(new Paragraph(jTable1_order.getValueAt(i, j).toString(),FontFactory.getFont(FontFactory.TIMES_BOLD, 8, Font.NORMAL)));
                                    else
                                        table.addCell(" ");

                            }
       
                        document.add(table);
                        document.close();
                        JOptionPane.showMessageDialog(null,"Report Saved");
                    
                        try{
                        
                            Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler "+
                                    "E:\\hotelandresturent\\Report of orders.pdf");
                        
                        }catch(Exception ex){
                            
                            JOptionPane.showMessageDialog(null, ex);
                        }
                    
        }catch(Exception ex){
                
                         JOptionPane.showMessageDialog(null, ex);
        } }

    private void genGraph1() {
         int sr;
                String Category; 
                sr = jTable1_order.getRowCount();
                
   
                    DefaultPieDataset dataset = new DefaultPieDataset();
 
                            
                        for(int i=0;i<sr;i++)
                        {
                        
                            Category=jTable1_order.getValueAt(i, 0).toString();

                            int count=0;
                            for(int j=0;j<sr;j++){
                                if(jTable1_order.getValueAt(j, 0).toString().equals(Category))
                                    count++;
                                
                            }
                            
                            System.out.println(count);
                            dataset.setValue ("'"+Category+"'", new Integer (count));
                        }
                
                

 
                    JFreeChart chart = ChartFactory.createPieChart("Types of the Orders ", dataset, true, true, true);
 
                    ChartFrame yourFrame = new ChartFrame ("Koga Foods", chart);
 
                    yourFrame.setSize(600, 600);
 
                    yourFrame.setVisible(true);
                    
                    
         
    
    }     

    private void graph_price() {
        int sr;
                String Category; 
                sr = jTable1_order.getRowCount();
                
   
                    DefaultPieDataset dataset = new DefaultPieDataset();
 
                            
                        for(int i=0;i<sr;i++)
                        {
                        
                            Category=jTable1_order.getValueAt(i, 3).toString();

                            int count=0;
                            for(int j=0;j<sr;j++){
                                if(jTable1_order.getValueAt(j, 3).toString().equals(Category))
                                    count++;
                                
                            }
                            
                            System.out.println(count);
                            dataset.setValue ("'"+Category+"'", new Integer (count));
                        }
                
                

 
                    JFreeChart chart = ChartFactory.createPieChart("According to the Total amount of the order", dataset, true, true, true);
 
                    ChartFrame yourFrame = new ChartFrame ("Koga Foods", chart);
 
                    yourFrame.setSize(600, 600);
 
                    yourFrame.setVisible(true);
                    
                    
         
       }

}
