package Financial;


import Financial.MyCodes.DbConnect;
import Financial.MyCodes.Methods;
import Financial.Salary;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Font;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Date;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.jdbc.JDBCCategoryDataset;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author Vindula
 */
public class FinancialUnit extends javax.swing.JInternalFrame {

    /**
     * Creates new form FinancialUnit
     */
    public static int passingValue;
    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null, rs2 = null;
    String selected;
    //String sqlDinin = "";
    public static int frameType = -1;
    public FinancialUnit() {

        passingValue = -1;
        ((javax.swing.plaf.basic.BasicInternalFrameUI)this.getUI()).setNorthPane(null);//No frame in internalFrame
        initComponents();
        con = DbConnect.connect();
    }

    public static void setVal(int val)
    {
        passingValue = val;
    }
    
    public double tableTotal(String sql)
    {
        double total = 0;
        try
        {
            
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            //jTable1.setModel(DbUtils.resultSetToTableModel(rs));
            while(rs.next())
            {
                total += (rs.getDouble(1));
            }
            
        }catch(Exception e){
            System.out.println("no");
        }
        return total;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        sellings = new javax.swing.JButton();
        report = new javax.swing.JButton();
        loans = new javax.swing.JButton();
        graphs = new javax.swing.JButton();
        earnings = new javax.swing.JButton();
        Oexpenses = new javax.swing.JButton();
        sal = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        eMonth1 = new javax.swing.JComboBox();
        eYear1 = new javax.swing.JComboBox();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/biz.png"))); // NOI18N
        jLabel2.setText("Financial Unit");

        sellings.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        sellings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-money-bag-48.png"))); // NOI18N
        sellings.setText("Sellings");
        sellings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellingsActionPerformed(evt);
            }
        });

        report.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        report.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/report 3.png"))); // NOI18N
        report.setText("Show Report");
        report.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportActionPerformed(evt);
            }
        });

        loans.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        loans.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/loan.png"))); // NOI18N
        loans.setText("Loans");
        loans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loansActionPerformed(evt);
            }
        });

        graphs.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        graphs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/report (2).png"))); // NOI18N
        graphs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphsActionPerformed(evt);
            }
        });

        earnings.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        earnings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-receive-cash-filled-48.png"))); // NOI18N
        earnings.setText("Other Earnings");
        earnings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                earningsActionPerformed(evt);
            }
        });

        Oexpenses.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Oexpenses.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-initiate-money-transfer-filled-48.png"))); // NOI18N
        Oexpenses.setText("Expenses");
        Oexpenses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OexpensesActionPerformed(evt);
            }
        });

        sal.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        sal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/salary.png"))); // NOI18N
        sal.setText("Paid Salaries");
        sal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Select Month");

        eMonth1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        eMonth1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        eMonth1.setToolTipText("Select end month");

        eYear1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        eYear1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eYear1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(eMonth1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(report, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 143, Short.MAX_VALUE)
                                .addComponent(sellings, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(95, 95, 95)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(earnings, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Oexpenses, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(136, 136, 136)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(loans, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(graphs, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(61, 61, 61))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Oexpenses, earnings, report, sal, sellings});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sellings)
                    .addComponent(earnings)
                    .addComponent(sal, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Oexpenses, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loans)
                    .addComponent(graphs))
                .addGap(79, 79, 79)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(report)
                    .addComponent(eMonth1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eYear1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(91, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Oexpenses, earnings, loans, report, sal, sellings});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sellingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellingsActionPerformed
        // TODO add your handling code here:
        setVal(5);
        TableLoadFrame t1 = new TableLoadFrame();
        t1.setVisible(true);
    }//GEN-LAST:event_sellingsActionPerformed

    private void earningsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_earningsActionPerformed

        setVal(1);
        OtherExInc t1 = new OtherExInc();
        t1.setVisible(true);
    }//GEN-LAST:event_earningsActionPerformed

    private void OexpensesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OexpensesActionPerformed

        setVal(2);
        OtherExInc t1 = new OtherExInc();
        t1.setVisible(true);
    }//GEN-LAST:event_OexpensesActionPerformed

    private void salActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salActionPerformed
        Salary t1 = new Salary();
        t1.setVisible(true);
    }//GEN-LAST:event_salActionPerformed

    private void loansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loansActionPerformed
        Loan t1 = new Loan();
        t1.setVisible(true);
    }//GEN-LAST:event_loansActionPerformed

    private void graphsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphsActionPerformed

        try
        {
            String sqlSelect = "SELECT `date_taken`, `total_to_pay` FROM `loan` WHERE `status` = 0";
            JDBCCategoryDataset dataset = new JDBCCategoryDataset(Financial.MyCodes.DbConnect.connect(),sqlSelect);

            String sqlSelect2 = "SELECT `expend_date`, `total_expence` FROM `other_expences`";
            JDBCCategoryDataset dataset2 = new JDBCCategoryDataset(Financial.MyCodes.DbConnect.connect(),sqlSelect2);

            JFreeChart chart = ChartFactory.createLineChart("Pending Loans", "Date", "Amount", dataset, PlotOrientation.VERTICAL, false, true, true);
            BarRenderer renderer=null;
            CategoryPlot plot = null;
            renderer=new BarRenderer();
            ChartFrame frame=new ChartFrame("Loan Chart",chart);
            frame.setVisible(true);
            frame.setSize(750,650);


        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
        }
    }//GEN-LAST:event_graphsActionPerformed

    private void reportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportActionPerformed
        // TODO add your handling code here:
        String mon = "";
        String month = eMonth1.getSelectedItem().toString();
        String year = eYear1.getSelectedItem().toString();
        
        Methods dd = new Methods();
        int monthNo = dd.getMonthNo(month);
        
        if(monthNo < 10)
        {
            mon = "-0"+monthNo+"-";
        }
        else
        {
            mon = "-"+monthNo+"-";
        }
        
        final String exOtherEx = "SELECT `total_expence` FROM `other_expences` WHERE `expend_date` LIKE '"+year+mon+"%'";
        final String exMaintain = "SELECT `Cost` FROM `longtime` WHERE `Enddate` LIKE '"+year+mon+"%'";
        final String exDelivery = "SELECT `charges` FROM `delivery_chages`";
        final String exMonthly = "SELECT `cost` FROM `bill_cost` WHERE `date_paid` LIKE '"+year+mon+"%'";
        final String exIng = "SELECT (`unitprice` * `unitprice`) as 'total' FROM `ingredients`";
        final String exEq = "SELECT (`unitprice`*`quantity`) as 'total 'FROM `equipments`";
        final String exSalary = "SELECT `PaidAmount` FROM `payroll` WHERE month = '"+monthNo+"'";
        
        final String inCat = "SELECT `total` FROM `cateringorder`";
        final String inDin = "SELECT `price` FROM `order_details`";
        final String inEv = "SELECT (`bandrent`+`decaration`+`advanceamount`) as 'total' FROM `function_payment`";
        final String inOtherIn = "SELECT `amount` FROM `other_income` WHERE `date` LIKE '"+year+mon+"%'";
        
        double exOtherExTotal = tableTotal(exOtherEx);
        double exMaintainTotal = tableTotal(exMaintain);
        double exDeliveryTotal = tableTotal(exDelivery);
        double exMonthlyTotal = tableTotal(exMonthly);
        double exIngTotal = tableTotal(exIng);
        double exEqTotal = tableTotal(exEq);
        double exSalaryTotal = tableTotal(exSalary);
        
        double catTotal = tableTotal(inCat);
        double inDinTotal = tableTotal(inDin);
        double inEvTotal = tableTotal(inEv);
        double inOtherInTotal = tableTotal(inOtherIn);
        //System.out.println(total);
        
        double totalEx = exOtherExTotal + exMaintainTotal + exDeliveryTotal + exMonthlyTotal + exIngTotal + exEqTotal + exSalaryTotal;
        double totalIn = catTotal + inDinTotal + inEvTotal + inOtherInTotal;
        double profit = totalIn - totalEx;
        
        
        //System.out.println(profit);
        try
        {
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream("Financial Report.pdf"));
            document.open();
            document.add(new Paragraph("Report generated for " + year + " " + month));
            document.add(new Paragraph("Financial Report",FontFactory.getFont(FontFactory.TIMES_BOLD, 24, Font.BOLD,BaseColor.GREEN)));
            document.add(new Paragraph("------------------------------------------------------------------------------------------------------------------------------"));
            document.add(new Paragraph(""));
            document.add(new Paragraph("Expenses : ",FontFactory.getFont(FontFactory.TIMES_ROMAN,18,Font.BOLD,BaseColor.GREEN)));
            document.add(new Paragraph(""));
            document.add(new Paragraph("Total maintenance cost : " + exMaintainTotal));
            document.add(new Paragraph("Total delivery cost : " + exDeliveryTotal));
            document.add(new Paragraph("Total regular monthly cost : " + exMonthlyTotal));
            document.add(new Paragraph("Total ingredient cost : " + exIngTotal));
            document.add(new Paragraph("Total equipment cost : " + exEqTotal));
            document.add(new Paragraph("Total paid salaries cost : " + exSalaryTotal));
            document.add(new Paragraph(""));
            document.add(new Paragraph("Total Expenses : " + totalEx));
            document.add(new Paragraph(""));
            document.add(new Paragraph("Earnings : ",FontFactory.getFont(FontFactory.TIMES_ROMAN,18,Font.BOLD,BaseColor.GREEN)));
            document.add(new Paragraph(""));
            document.add(new Paragraph("Total catering earn : " + catTotal));
            document.add(new Paragraph("Total Dain-in earn : " + inDinTotal));
            document.add(new Paragraph("Total events earn : " + inEvTotal));
            document.add(new Paragraph("Total other incomes : " + inOtherInTotal));
            document.add(new Paragraph(""));
            document.add(new Paragraph("Total Income : " + totalIn));
            document.add(new Paragraph(""));
            
            document.add(new Paragraph(""));
            document.add(new Paragraph("Profit",FontFactory.getFont(FontFactory.TIMES_ROMAN,18,Font.BOLD,BaseColor.GREEN)));
            document.add(new Paragraph(""));
            document.add(new Paragraph("Total Profit = (Total Income - Total Expenses)"));
            document.add(new Paragraph("Total Profit = " + profit));
            document.add(new Paragraph(""));
            document.add(new Paragraph(""));
            document.add(new Paragraph(""));
            document.add(new Paragraph("------Please note that this documents does not include loan records taken by the business---------"));
            document.add(new Paragraph(""));
            document.add(new Paragraph("This report is generated by Koga Foods service"));
            document.add(new Paragraph(""));
            document.add(new Paragraph("Generate date"));
  
            document.add(new Paragraph(new Date().toString()));
            

            document.close();

            JOptionPane.showMessageDialog(null, "Your document is compete", "Complete", JOptionPane.INFORMATION_MESSAGE);
             try{
                        
                            Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler "+
                                    "Financial Report.pdf");
                        
                        }catch(Exception ex){
                            
                            JOptionPane.showMessageDialog(null, ex);
                        }
        }catch(Exception e)
        {
            System.out.println("Error");
        }

    }//GEN-LAST:event_reportActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Oexpenses;
    private javax.swing.JComboBox eMonth1;
    private javax.swing.JComboBox eYear1;
    private javax.swing.JButton earnings;
    private javax.swing.JButton graphs;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JButton loans;
    private javax.swing.JButton report;
    private javax.swing.JButton sal;
    private javax.swing.JButton sellings;
    // End of variables declaration//GEN-END:variables
}
